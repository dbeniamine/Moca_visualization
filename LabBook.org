#+TITLE: Beniamine's LabBook
#+AUTHOR: Beniamine
#+LATEX_HEADER: \usepackage[margin=2cm,a4paper]{geometry}
#+STARTUP: overview indent
#+TAGS: Lucas(L) David(D) noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w!) | DONE(d!) CANCELLED(c!) DEFERRED(f!)

* 2016-02-17 Memory access along time (from MOCA)

David's traces have only variables. We should look to them as states.

So convert accordingly:

#+begin_src bash :results output :session :exports both
grep ^Variable Moca_matrix_bloc_20160217_Virt.pjdump | 
   awk -F, '{print "State,"$2",access,"$4","$5","$6",0,"$3}' > states_Virt.csv
grep ^Variable Moca_matrix_bloc_20160217_Phy.pjdump | 
   awk -F, '{print "State,"$2",access,"$4","$5","$6",0,"$3}' > states_Phy.csv
#+END_SRC

#+RESULTS:

Great, now let's load them into R.

#+begin_src R :results output :session :exports both
read_paje_trace <- function(file) {
  df <- read.csv(file, header=FALSE, strip.white=TRUE)
  names(df) <- c("Nature","ResourceId","Type","Start","End","Duration", "Depth", "Value")
  df$Origin=file
  m <- min(df$Start)
  df$Start <- df$Start - m
  df$End <- df$Start+df$Duration
  df$Origin <- NULL
  df$Nature <- NULL
  df$Depth <- NULL
  df
}
df_Virt <- read_paje_trace("states_Virt.csv");
df_Phy <- read_paje_trace("states_Phy.csv");
#+end_src

#+RESULTS:

#+begin_src R :results output :session :exports both
nrow(df_Virt);
nrow(df_Phy);
#+end_src

#+RESULTS:
: [1] 4478461
: [1] 4472513

The largest dataframes I have ever seen.

Let's play with care.

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
library(ggplot2);
df <- df_Virt;
df <- df[df$ResourceId == 140737310789152, ];
p <- ggplot(df) +
  theme_bw() +
  geom_segment(size=15, aes(x=Start,xend=End, y=ResourceId,yend=ResourceId), color="black") +
  geom_segment(size=13, aes(x=Start,xend=End, y=ResourceId,yend=ResourceId, color=Value)) +
  facet_wrap(~Value, ncol=1);
p
#+end_src

#+RESULTS:
[[file:/tmp/babel-9357QOL/figure9357w0Z.png]]


Strange. Let's see how many *Shared_read* there are.

#+begin_src R :results output :session :exports both
nrow(df[df$Value == "Private_Read" & df$Start < 200000 & df$Start > 150000,]);
nrow(df[df$Value == "Shared_Read" & df$Start < 180000 & df$Start > 210000,]);
df[df$Start > 180000 & df$Start < 210000,]
#+end_src

#+RESULTS:
: [1] 0
: [1] 0
:          ResourceId   Type  Start    End Duration       Value
: 289172 1.407373e+14 access 189573 221868    32295 Shared_Read
: 289173 1.407373e+14 access 189573 221868    32295 Shared_Read
: 289174 1.407373e+14 access 189573 221868    32295 Shared_Read
: 289175 1.407373e+14 access 189573 221868    32295 Shared_Read

Lot's of them for this particular address. Let's zoom in.

#+begin_src R :results output graphics :file img/virt_first_try_2.png :exports both :width 600 :height 400 :session
library(ggplot2);
df <- df_Virt;
df <- df;
p <- ggplot(df) +
  theme_bw() +
  geom_segment(size=13, aes(x=Start,xend=End, y=ResourceId,yend=ResourceId, color=Value), alpha=.4) +
  facet_wrap(~Value, ncol=1);
p
#+end_src

#+RESULTS:
[[file:img/first_try_2.png]]



#+begin_src R :results output graphics :file img/phy_first_try_1.png :exports both :width 600 :height 400 :session
library(ggplot2);
df <- df_Phy;
df <- df;
p <- ggplot(df) +
  theme_bw() +
  geom_segment(size=13, aes(x=Start,xend=End, y=ResourceId,yend=ResourceId, color=Value), alpha=.4) +
  facet_wrap(~Value, ncol=1);
p
#+end_src

#+RESULTS:
[[file:img/phy_first_try_1.png]]


* 2016-02-17 Calculating intensity

_First Attempt_

I'll try with bash.

#+begin_src bash :results output :session :exports both
cat states_Virt.csv  | grep Shared_Read > states_Virt_shared_read.csv
cat states_Virt_shared_read.csv | cut -d, -f2 | sort | uniq > add_Virt
cat states_Virt_shared_read.csv  | cut -d, -f4-6 | sort | uniq  > timeslices

cat states_Virt_shared_read.csv  | cut -d, -f2,4,5,8 > states_Virt_shared_read_essential.csv
cat states_Virt_shared_read_essential.csv  | sort | uniq  > states_Virt_shared_read_essential_unique.csv
while read line ; do echo -n "$line,"; cat states_Virt_shared_read_essential.csv | grep "$line" | wc -l; done < states_Virt_shared_read_essential_unique.csv > states_Virt_shared_read_essential_unique_with_intensity.csv
#+end_src

Done. Just check the file:
+ =states_Virt_shared_read_essential_unique_with_intensity.csv=
You can load with R and play with it.

_Second Attempt_

Actually, I believe I can do it faster and cleaner with R.

#+begin_src R :results output :session :exports both
library(plyr);
k <- read.csv("states_Virt_shared_read.csv", header=FALSE);
options("scipen"=100, "digits"=4);
head(k);
#+end_src

#+RESULTS:
:      V1              V2     V3 V4   V5   V6 V7          V8
: 1 State 140737351871824 access  1 4396 4395  0 Shared_Read
: 2 State 140737351871976 access  1 4396 4395  0 Shared_Read
: 3 State 140737347542408 access  1 4396 4395  0 Shared_Read
: 4 State 140737347542640 access  1 4396 4395  0 Shared_Read
: 5 State 140737488351205 access  1 4396 4395  0 Shared_Read
: 6 State 140737488350713 access  1 4396 4395  0 Shared_Read

#+begin_src R :results output :session :exports both
sapply(k, class);
#+end_src

#+RESULTS:
:        V1        V2        V3        V4        V5        V6        V7        V8 
:  "factor" "numeric"  "factor" "integer" "integer" "integer" "integer"  "factor"

#+begin_src R :results output :session :exports both
names(k) <- c("Nature", "Address", "Type", "Start", "End", "Duration", "Imbric", "Value");
k$Nature <- NULL;
k$Type <- NULL;
k$Imbric <- NULL;
head(k);
#+end_src

#+RESULTS:
:           Address Start  End Duration       Value
: 1 140737351871824     1 4396     4395 Shared_Read
: 2 140737351871976     1 4396     4395 Shared_Read
: 3 140737347542408     1 4396     4395 Shared_Read
: 4 140737347542640     1 4396     4395 Shared_Read
: 5 140737488351205     1 4396     4395 Shared_Read
: 6 140737488350713     1 4396     4395 Shared_Read

#+begin_src R :results output :session :exports both
sapply(k, class);
#+end_src

#+RESULTS:
:   Address     Start       End  Duration     Value 
: "numeric" "integer" "integer" "integer"  "factor"

Do the magic. This command takes time.

#+begin_src R :results output :session :exports both
library(plyr);
g <- ddply(k, .(Address, Start, End, Duration, Value), summarize, N=length(Value));
head(g);
#+end_src

#+RESULTS:
:        Address Start  End Duration       Value N
: 1 1.407374e+14     1 4396     4395 Shared_Read 1
: 2 1.407374e+14     1 4396     4395 Shared_Read 1
: 3 1.407373e+14     1 4396     4395 Shared_Read 1
: 4 1.407373e+14     1 4396     4395 Shared_Read 1
: 5 1.407375e+14     1 4396     4395 Shared_Read 1
: 6 1.407375e+14     1 4396     4395 Shared_Read 1

#+begin_src R :results output :session :exports both
head(g);
sapply(g, class);
#+end_src

#+RESULTS:
:           Address Start  End Duration       Value N
: 1 140737351871824     1 4396     4395 Shared_Read 1
: 2 140737351871976     1 4396     4395 Shared_Read 1
: 3 140737347542408     1 4396     4395 Shared_Read 1
: 4 140737347542640     1 4396     4395 Shared_Read 1
: 5 140737488351205     1 4396     4395 Shared_Read 1
: 6 140737488350713     1 4396     4395 Shared_Read 1
:   Address     Start       End  Duration     Value         N 
: "numeric" "integer" "integer" "integer"  "factor" "integer"

#+begin_src R :results output :session :exports both
summary(g$N);
#+end_src

#+RESULTS:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:   1.000   2.000   3.000   3.421   5.000   8.000

#+begin_src R :results output :session :exports both
#head(g[g$Address == 140737308215152,]);
head(g[g$Address == 140737312395264,]);
median(g[g$Address > 7000000,]$Address);
#tail(g);
#+end_src

#+RESULTS:
:               Address  Start    End Duration       Value N
: 17014 140737312395264  28278  67005    38727 Shared_Read 3
: 22805 140737312395264  54041  77448    23407 Shared_Read 2
: 30183 140737312395264  67009 126332    59323 Shared_Read 3
: 33031 140737312395264  77453  90227    12774 Shared_Read 2
: 36721 140737312395264  90243 137116    46873 Shared_Read 2
: 50336 140737312395264 126336 171611    45275 Shared_Read 5
: [1] 140737314631680

#+begin_src R :results output graphics :file img/intensity_1_up.png :exports both :width 600 :height 400 :session
library(ggplot2);
p <- ggplot(g[g$Address > 6304416,]) +
  theme_bw() +
  geom_segment(size=7, aes(x=Start,xend=End, y=Address,yend=Address, color=N)) +
  facet_wrap(~Value, ncol=1);# + ylim(139000000000000, NA);
p
#+end_src

#+RESULTS:
[[file:img/intensity_1_up.png]]

I just can't find out the best Y scale. Let's create a histogram of
these addresses.

#+begin_src R :results output :session :exports both
h <- g[g$Address > 7304416,];
h$Address = h$Address - 140737000000000;
head(h);
#+end_src

#+RESULTS:
:     Address Start  End Duration       Value N
: 1 351871824     1 4396     4395 Shared_Read 1
: 2 351871976     1 4396     4395 Shared_Read 1
: 3 347542408     1 4396     4395 Shared_Read 1
: 4 347542640     1 4396     4395 Shared_Read 1
: 5 488351205     1 4396     4395 Shared_Read 1
: 6 488350713     1 4396     4395 Shared_Read 1

#+begin_src R :results output graphics :file img/address_histogram.png :exports both :width 600 :height 400 :session
ggplot(h, aes(Address)) + xlim(300000000, 330000000) + geom_histogram();
#+end_src

#+RESULTS:
[[file:img/address_histogram.png]]

Okay, let's try again.

#+begin_src R :results output graphics :file img/intensity_2.png :exports both :width 600 :height 400 :session
library(ggplot2);
p <- ggplot(h) +
  theme_bw() +
  geom_segment(size=2, aes(x=Start,xend=End, y=Address,yend=Address, color=N)) +
  facet_wrap(~Value, ncol=1);# + ylim(300000000, 330000000)
p
#+end_src

#+RESULTS:
[[file:img/intensity_2.png]]


Not that good, need further filtering:

#+begin_src R :results output :session :exports both
summary(h$Address);
#+end_src

#+RESULTS:
:      Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
: 271000000 310000000 315000000 315000000 319000000 488000000

Let's get only addresses from the 1st to the 3rd Qu.

#+begin_src R :results output graphics :file img/intensity_3.png :exports both :width 600 :height 400 :session
library(ggplot2);
p <- ggplot(h) +
  theme_bw() +
  geom_segment(size=2, aes(x=Start,xend=End, y=Address,yend=Address, color=N)) +
  facet_wrap(~Value, ncol=1) + ylim(310000000, 319000000)
p
#+end_src

#+RESULTS:
[[file:img/intensity_3.png]]

Finally. Let's reduce size.

#+begin_src R :results output graphics :file img/intensity_4.png :exports both :width 600 :height 800 :session
library(ggplot2);
p <- ggplot(h) +
  theme_bw() +
  geom_segment(size=0.2, aes(x=Start,xend=End, y=Address,yend=Address, color=N)) +
  facet_wrap(~Value, ncol=1) + ylim(310000000, 319000000)
p
#+end_src

#+RESULTS:
[[file:img/intensity_4.png]]


#+begin_src R :results output graphics :file img/intensity_5.png :exports both :width 600 :height 2000 :session
library(ggplot2);
p <- ggplot(h) +
  theme_bw() +
  geom_segment(size=0.2, aes(x=Start,xend=End, y=Address,yend=Address, color=N)) +
  facet_wrap(~Value, ncol=1) + ylim(310000000, 319000000)
p
#+end_src

#+RESULTS:
[[file:img/intensity_5.png]]

#+begin_src R :results output graphics :file img/intensity_6.png :exports both :width 600 :height 2000 :session
library(ggplot2);
p <- ggplot(h) +
  theme_bw() +
  geom_segment(size=0.5, aes(x=Start,xend=End, y=Address,yend=Address, color=N)) +
  facet_wrap(~Value, ncol=1) + ylim(310000000, 311000000)
p
#+end_src

#+RESULTS:
[[file:img/intensity_6.png]]

** Old Stuff                                                    :deprecated:

Let's make rows unique, since now we have the intensity.

#+begin_src R :results output :session :exports both
h <- unique(g);
#+end_src

#+RESULTS:

#+begin_src R :results output :session :exports both
head(h);
#+end_src

#+RESULTS:
:        Address Start  End Duration       Value N
: 1 1.407374e+14     1 4396     4395 Shared_Read 1
: 2 1.407374e+14     1 4396     4395 Shared_Read 1
: 3 1.407373e+14     1 4396     4395 Shared_Read 1
: 4 1.407373e+14     1 4396     4395 Shared_Read 1
: 5 1.407375e+14     1 4396     4395 Shared_Read 1
: 6 1.407375e+14     1 4396     4395 Shared_Read 1

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session
ggplot(h, aes(x=Start, y=N)) + geom_point();
#+end_src

#+RESULTS:
[[file:/tmp/babel-9357QOL/figure9357x8U.png]]

* 2016-02-23 New traces

I got a new tarbal from David, here's its MD5 signature.

#+begin_src sh :results output :session :exports both
md5sum ../Moca-matrix.tgz
#+end_src

#+RESULTS:
: 7a81360ff13bcdd0cb3dc23e5b006805  ../Moca-matrix.tgz

Extracting the data in the =v2= directory.

#+begin_src sh :results output :session :exports both
mkdir -p v2; cd v2; tar xfz ../../Moca-matrix.tgz; mv Moca-matrix-bloc/* .; rm -rf Moca-matrix-bloc;
#+end_src

#+RESULTS:

List contents:

#+begin_src sh :results output :session :exports both
pwd
ls -hl v2
#+end_src

#+RESULTS:
: /home/schnorr/TRACES/david/Moca-matrix-bloc
: total 1.1G
: -rw-r--r-- 1 schnorr schnorr  126 Feb 17 10:54 matrix.stackmap.csv
: -rw-r--r-- 1 schnorr schnorr  331 Feb 17 10:54 matrix.structs.csv
: -rw-r--r-- 1 schnorr schnorr 317M Feb 18 13:31 Moca-framesoc.csv
: -rw-r--r-- 1 schnorr schnorr  94M Feb 17 10:54 Moca-full-trace.csv
: -rw-r--r-- 1 schnorr schnorr 351M Feb 18 14:01 Moca_matrix_bloc_20160218Virt.pjdump
: -rw-r--r-- 1 schnorr schnorr 301M Feb 18 14:31 states

Great, now we are ready to start again.

* 2016-02-23 Playing with new traces

It looks like I only get virtual mem addresses this time. Okay.

#+begin_src sh :results output :session :exports both
cd v2
grep ^Variable Moca_matrix_bloc_20160218Virt.pjdump | 
   awk -F, '{print "State,"$2",access,"$4","$5","$6",0,"$3}' > states_Virt.csv
#+end_src

#+RESULTS:

I have noticed that some durations are negative. See:

#+begin_src sh :results output :session :exports both
cd v2
cat states_Virt.csv | grep "-" | head
#+end_src

#+RESULTS:
#+begin_example
State,140737305567232,access,17863,17762,-101,0,Shared_Read
State,140737305567232,access,17863,17762,-101,0,Shared_Read
State,140737305569152,access,17863,17762,-101,0,Shared_Read
State,140737305599152,access,17863,17762,-101,0,Shared_Read
State,140737305599152,access,17863,17762,-101,0,Shared_Read
State,140737305595904,access,17863,17762,-101,0,Shared_Read
State,140737305611152,access,17863,17762,-101,0,Shared_Read
State,140737305608192,access,17863,17762,-101,0,Shared_Read
State,140737305623152,access,17863,17762,-101,0,Shared_Read
State,140737305623152,access,17863,17762,-101,0,Shared_Read
#+end_example

_Summary_:
- Negative durations (probably an error)
